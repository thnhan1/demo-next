// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // output   = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String?
  description String?
  products    Product[]

  @@map("category")
}

model Product {
  id          String           @id @default(uuid()) @db.Uuid
  name        String?
  description String?
  createdAt   DateTime?        @map("created_at")
  updatedAt   DateTime?        @map("updated_at")
  categoryId  String?          @map("category_id") @db.Uuid
  category    Category?        @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  cartItems   CartItem[]

  @@map("product")
}

model ProductImage {
  id          String   @id @default(uuid()) @db.Uuid
  url         String?
  isThumbnail Boolean? @map("is_thumbnail")
  sortOrder   Int?     @map("sort_order")
  productId   String   @map("product_id") @db.Uuid
  product     Product  @relation(fields: [productId], references: [id])

  @@map("product_image")
}

model ProductVariant {
  id        String   @id @default(uuid()) @db.Uuid
  color     String?
  imageUrl  String?  @map("image_url")
  price     Decimal? @db.Decimal(38, 2)
  size      String?
  sku       String?
  stock     Int?
  productId String   @map("product_id") @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_variant")
}

enum Role {
  GUEST
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  carts         Cart[]

  @@map("user")
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @map("user_id") @db.Uuid
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id") @db.Uuid
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String?    @map("user_id") @db.Uuid
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("cart")
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  cartId    String   @map("cart_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(38, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_item")
}
